{"version":3,"file":"bundle.js","names":[],"mappings":"","sources":["bundle.js"],"sourcesContent":["(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require==\"function\"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error(\"Cannot find module '\"+o+\"'\");throw f.code=\"MODULE_NOT_FOUND\",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require==\"function\"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){\nvar SpellingService = require(\"./service/SpellingService.js\");\nif (typeof(window) == 'undefined') {\n\tvar React = require('react');\n}\nelse {\n\tvar React = window.React;\n}\nvar templates = require('./templates.js');\n\nvar App = React.createClass({displayName: \"App\",\n\t\n\tblankRow: {word: \"\", suggestions: []},\n\t\n\trender: function() {\n\t\tconsole.log(\"RENDER\");\n\t\treturn templates.App.bind(this)();\n\t},\n\t\n\tgetInitialState: function() {\n\t\treturn {\n\t\t\tcorrections: [\n\t\t\t]\n\t\t};\n\t},\n\t\n\tsubmitStory: function(text) {\n\t\tSpellingService.check(\n\t\t\ttext, \n\t\t\tthis.updateSpellingCorrections.bind(this), \n\t\t\tthis.handleError.bind(this));\n\t},\n\t\n\tupdateSpellingCorrections: function(data) {\n\t\tthis.setState({\n\t\t\tcorrections: data\n\t\t});\n\t},\n\t\n\thandleError: function(data, status) {\n    \tconsole.debug(\"spell check error: \", status);\n\t}\n\t\n\t\n});\n\nmodule.exports = App;\n\nif (typeof(window) !== 'undefined') {\n\twindow.addEventListener(\"load\", function() {\n\t\tReact.render(\n\t\t\tReact.createElement(App, {}),\n\t\t\tdocument.getElementById('app-section')\t\n\t\t);\n\t});\n}\n\n},{\"./service/SpellingService.js\":7,\"./templates.js\":8,\"react\":undefined}],2:[function(require,module,exports){\n/** @jsx React.DOM */\n/* jshint newcap: false */\nif (typeof(window) == 'undefined') {\n\tvar React = require('react');\n\tvar addons = require('react-addons');\n}\nelse {\n\tvar React = window.React;\n\tvar addons = React.addons;\n}\nvar cx = addons.classSet;\n\n/**\n * @const CSS Component prefix\n */\nvar CSS_PREFIX = 'Combobox';\n\n/**\n * Partial\n * @see http://underscorejs.org/#partial\n */\nvar _partial = function(func) {\n    var boundArgs = Array.prototype.slice.call(arguments, 1);\n    return function() {\n        var position = 0;\n        var args = boundArgs.slice();\n        while (position < arguments.length) {\n            args.push(arguments[position++]);\n        }\n        return func.apply(this, args);\n    };\n};\n\n/**\n * Generate CSS class for Element\n * @param  {string} blockName\n * @param  {string} elemName  Element name\n * @return {string}           CSS class for Element\n */\nvar _clsElem = function(blockName, elemName) {\n    var className = blockName + '__' + elemName;\n    return className;\n};\n\n/**\n * It is _clsState() with predefined blockName=CSS_PREFIX\n * @see _clsElem\n */\nvar clsElem = _partial(_clsElem, CSS_PREFIX);\n\n/**\n * Generate CSS class for Block or Element state (modificator)\n * @param  {string} blockName Block name or Element name generated by clsElem\n * @param  {string} stateName\n * @param  {string} [stateValue]\n * @return {string}             CSS class for Block or Element with state\n */\nvar clsState = function(blockName, stateName, stateValue) {\n    var className = blockName + '_' + stateName +\n                    ((stateValue == null) ? '' : '-' +  stateValue);\n    return className;\n};\n\n/**\n * It is clsState() with predefined blockName=CSS_PREFIX\n * @see clsState\n */\nvar clsBlockState = _partial(clsState, CSS_PREFIX);\n\n/**\n * Combo box option UI component\n * @class\n */\nvar ComboboxOption = React.createClass({displayName: \"ComboboxOption\",\n    // Default component methods\n    propTypes: {\n        selected: React.PropTypes.bool,\n        children: React.PropTypes.string.isRequired,\n        value: React.PropTypes.object,\n        onClick: React.PropTypes.func\n    },\n\n    getDefaultProps: function() {\n        return {\n            selected: false,\n            children: \"\",\n            value: null\n        };\n    },\n\n    render: function() {\n        var cls = {};\n        cls[clsElem('dropdownOption')] = true;\n        cls[clsState(clsElem('dropdownOption'), 'selected')] = this.props.selected;\n\n        return (\n            React.createElement(\"li\", {className: cx(cls), onClick: this.onClick}, \n                this.props.children\n            )\n        );\n    },\n\n    onClick: function(evt) {\n        this.props.onClick(evt, this.props.label, this.props.value);\n        return false;\n    }\n});\n\n/**\n * Combo box UI component\n * @class\n */\nmodule.exports = React.createClass({displayName: \"exports\",\n    // Default component methods\n    propTypes: {\n        // Default data items\n        data: React.PropTypes.arrayOf(\n                React.PropTypes.shape({ label: React.PropTypes.string.isRequired })\n            ).isRequired,\n        // Default text value\n        defaultValue: React.PropTypes.string,\n        // Combobox id disabled\n        disabled: React.PropTypes.bool,\n        // Function for filter items in data (uses value from text field)\n        filterFunc: React.PropTypes.oneOfType([\n                        React.PropTypes.func,\n                        React.PropTypes.oneOf([false])\n                    ]),\n        // Function which will be invoked when value is changed\n        onChange: React.PropTypes.func\n    },\n\n    getDefaultProps: function() {\n        return {\n            data: [],\n            defaultValue: \"\",\n            disabled: false,\n            filterFunc: function(textValue, item){\n                var s = textValue.toLowerCase().replace(' ', '');\n                return item.label.toLowerCase().replace(' ', '').indexOf(s) >= 0;\n            },\n            onChange: function() {},\n        };\n    },\n\n    getInitialState: function() {\n        var _filtratedData = this.props.data;\n        if (this.props.defaultValue !== '') {\n            _filtratedData = this._getFiltratedData(this.props.defaultValue, this.props.data);\n        }\n\n        return {\n            isOpen: false,\n            isEnabled: !this.props.disabled,\n            _data: this.props.data,\n            _filtratedData: _filtratedData,\n            _textValue: this.props.defaultValue,\n            _selectedOptionData: null,\n            _selectedIndex: -1,\n            additionalClassName: ''\n        };\n    },\n\n    render: function() {\n        var cls = {};\n        cls[CSS_PREFIX] = true;\n        cls[clsBlockState('closed')] = !this.state.isOpen;\n        cls[clsBlockState('disabled')] = !this.state.isEnabled;\n\n        var dropdown = \"\";\n        if (this.state.isEnabled) {\n            dropdown = (\n                React.createElement(\"div\", {className: clsElem('dropdown')}, \n                    React.createElement(\"div\", {className: clsElem('dropdownWrapper')}, \n                        React.createElement(\"ul\", {className: clsElem('dropdownList')}, \n                            this.state._filtratedData.map(this._dataToOption)\n                        )\n                    )\n                )\n            );\n        }\n        return (\n            React.createElement(\"div\", {className: cx(cls) + ' ' + this.state.additionalClassName, \n                onKeyDown: this._handleKeyDown, \n                onBlur: this._blur}, \n                React.createElement(\"input\", {\n                    ref: \"textField\", \n                    type: \"text\", \n                    disabled: !this.state.isEnabled, \n                    className: clsElem('input'), \n                    value: this.state._textValue, \n                    onChange: this._handleTextChange, \n                    onFocus: this._focus}), \n                dropdown, \n                React.createElement(\"span\", {className: clsElem('buttonWrapper')}, \n                    React.createElement(\"button\", {\n                        ref: \"button\", \n                        type: \"button\", \n                        onClick: this._handleButtonClick, \n                        className: clsElem('button'), \n                        disabled: !this.state.isEnabled}, \"â–¼\")\n                )\n            )\n        );\n    },\n\n    componentDidUpdate: function(prevProps, prevState) {\n        if (prevState._textValue !== this.state._textValue) {\n            this.props.onChange(this.state._textValue, prevState._textValue);\n        }\n    },\n\n    // Custom component methods\n    // Private\n    _timerId: null,\n\n    /**\n     * Convert dataItem to <Option/>\n     * @param  {object} dataItem\n     * @param  {string} dataItem.label Label for option\n     * @param  {number} idx index of element\n     * @return {<Option/>}\n     */\n    _dataToOption: function(dataItem, idx) {\n        var label = dataItem.label;\n        var selected = (idx === this.state._selectedIndex);\n        var item = (\n            React.createElement(ComboboxOption, {\n                selected: selected, \n                label: label, \n                value: dataItem, \n                key: 'key-' + label.toLowerCase().replace(' ', ''), \n                onClick: this._handleOptionClick}, \n                label\n            )\n        );\n        return item;\n    },\n\n    /**\n     * Handle textField change\n     * @param  {event} evt\n     * @return false\n     */\n    _handleTextChange: function(evt) {\n        var newValue = evt.target.value;\n        this.setState({\n            _selectedIndex: -1,\n            _selectedOptionData: null\n        });\n        this.setTextValue(newValue, true);\n        return false;\n    },\n\n    /**\n     * Handle <Option> click\n     * @param  {event} evt\n     * @param  {string} label <Option/> label\n     * @param  {object} dataItem <Option/> dataItem\n     * @return false\n     */\n    _handleOptionClick: function(evt, label, dataItem) {\n        this.setState({_selectedOptionData: dataItem});\n        this.setTextValue(label);\n        return false;\n    },\n\n    /**\n     * Handle textField keyDown\n     * @param  {event} evt\n     * @return {bool} false if is ArrowDown/ArrowUp/Enter/Escape keys\n     */\n    _handleKeyDown: function(evt) {\n        var result = true;\n        if (evt.key === 'ArrowDown') {\n            this._moveOptionSelection(1);\n            result = false;\n        } else if (evt.key === 'ArrowUp') {\n            this._moveOptionSelection(-1);\n            result = false;\n        } else if (evt.key === 'Enter') {\n            var dataItem = this.state._filtratedData[this.state._selectedIndex];\n            if (dataItem) {\n                this._handleOptionClick(null, dataItem['label'], dataItem);\n            }\n            this.refs.textField.getDOMNode().blur();\n            result = false;\n        } else if (evt.key === 'Escape') {\n            this.refs.textField.getDOMNode().blur();\n            this.close();\n            result = false;\n        }\n        return result;\n    },\n\n    /**\n     * Handle button click\n     * @param  {event} evt\n     */\n    _handleButtonClick: function(evt) {\n        if (!this.state.isOpen) {\n            this.refs.textField.getDOMNode().focus();\n        }\n        return false;\n    },\n\n    /**\n     * Handle textField focus\n     * @param  {event} evt\n     */\n    _focus: function(evt) {\n        clearTimeout(this._timerId);\n        delete this._timerId;\n\n        var textField = evt.target;\n        var newValue = textField.value;\n        var len = newValue.length;\n        textField.setSelectionRange(len, len);\n        this.setTextValue(newValue, true);\n        return false;\n    },\n\n    /**\n     * Handle textField blur\n     * @param  {event} evt\n     */\n    _blur: function(evt) {\n        if (evt.relatedTarget == null || !this.getDOMNode().contains(evt.relatedTarget)) {\n            // HINT if this.close() fires before this._handleOptionClick() nothing happens :(\n            this._timerId = setTimeout(this.close, 100);\n        }\n        return false;\n    },\n\n    /**\n     * move option selection\n     * @param  {number} direction of selction move (positive - move down, negative - move up)\n     */\n    _moveOptionSelection: function(direction) {\n        if (this.state.isOpen) {\n            var _selectedIndex = this.state._selectedIndex + direction;\n            if (_selectedIndex < 0) {\n                _selectedIndex = this.state._filtratedData.length - 1;\n            } else if (_selectedIndex >= this.state._filtratedData.length) {\n                _selectedIndex = 0;\n            }\n            this.setState({_selectedIndex: _selectedIndex}, this._scrollToSelected);\n        }\n    },\n\n    /**\n     * Scroll dropdown to selected element\n     */\n    _scrollToSelected: function() {\n        var cls = clsState(clsElem('dropdownOption'), 'selected');\n        this.getDOMNode().getElementsByClassName(cls)[0].scrollIntoView(false);\n    },\n\n    /**\n     * Filter state._data by text\n     * @param  {string=this.state._textValue} txt\n     * @param  {string=this.state._data} data\n     * @return {object[]}   filtrated data\n     */\n    _getFiltratedData: function(txt, data){\n        if (txt == null) {\n            txt = this.state._textValue;\n        }\n        if (data == null) {\n            data = this.state._data;\n        }\n\n        var filtratedData = data;\n\n        if (typeof this.props.filterFunc === 'function') {\n            var filterFunc = _partial(this.props.filterFunc, txt);\n            filtratedData = data.filter(filterFunc);\n        }\n\n        return filtratedData;\n    },\n\n    // Public\n    /**\n     * Open Combo box dropdown list is not empty\n     */\n    open: function() {\n        var isOpen = this.state._filtratedData.length > 0;\n        this.setState({\n            isOpen: isOpen,\n            _selectedIndex: -1\n        });\n    },\n\n    /**\n     * Close Combo box dropdown\n     */\n    close: function() {\n        this.setState({\n            isOpen: false\n        });\n    },\n\n    /**\n     * Dropdown is closed\n     * @return {Boolean}\n     */\n    isClosed: function() {\n        return !this.state.isOpen;\n    },\n\n    /**\n     * Enable Combo box\n     */\n    enable: function() {\n        this.setState({\n            isEnabled: true\n        });\n    },\n\n    /**\n     * Disable Combo box\n     */\n    disable: function() {\n        this.setState({\n            isEnabled: false,\n            isOpen: false\n        });\n    },\n\n    /**\n     * Combobox is disabled\n     * @return {Boolean}\n     */\n    isDisabled: function() {\n        return !this.state.isEnabled;\n    },\n\n    /**\n     * Set Combobox text value\n     * @param {string} newValue\n     * @param {bool} open if passable\n     */\n    setTextValue: function(newValue, open) {\n        open = open || false;\n        var newData = this._getFiltratedData(newValue);\n\n        this.setState({\n            _textValue: newValue,\n            _filtratedData: newData,\n            isOpen: open && (newData.length > 0)\n        });\n    },\n    \n    componentWillReceiveProps: function(nextProps) {\n    \tthis.setData(nextProps.data);\n\t},\n\n    /**\n     * Set data items\n     * @param {object[]} array of dataItems for <Option/>\n     */\n    setData: function(data) {\n        var newFiltratedData = this._getFiltratedData(this.state._textValue, data);\n\n        this.setState({\n            _filtratedData: newFiltratedData,\n            _data: data,\n            _selectedIndex: -1,\n            _selectedOptionData: null\n        });\n    },\n\n    /**\n     * Get value\n     * @return {string|object} value\n     */\n    value: function() {\n        var result = this.state._selectedOptionData || this.state._textValue;\n        return result;\n    }\n});\n\n\n},{\"react\":undefined,\"react-addons\":undefined}],3:[function(require,module,exports){\nif (typeof(window) == 'undefined') {\n\tvar React = require('react');\n}\nelse {\n\tvar React = window.React;\n}\n\nvar SpellingService = require(\"./service/SpellingService.js\");\nvar templates = require('./templates.js');\n\nmodule.exports = React.createClass({displayName: \"exports\",\n\t\n\tconvertSuggestionsToComboData: function(suggestions) {\n\t\tvar suggestionsComboOptions = [];\n\t\tvar wordMap = {};\n\t\tif (suggestions) {\n\t\t\tsuggestions.forEach(function(item) {\n\t\t\t\tif (!wordMap[item.toLowerCase()]) {\n\t\t\t\t\tsuggestionsComboOptions.push({\"label\": item, \"value\": item});\n\t\t\t\t\twordMap[item.toLowerCase()] = true;\n\t\t\t\t}\n\t\t\t});\n\t\t}\n\t\treturn suggestionsComboOptions;\n\t},\n\t\n\tgetInitialState: function() {\n\t\treturn {\n\t\t\t\"word\": this.props.correction.word,\n\t\t\t\"spellingSuggestions\": this.convertSuggestionsToComboData(this.props.correction.suggestions),\n\t\t\t\"searchType\": \"endsWith\",\n\t\t\t\"searchText\": \"\",\n\t\t\t\"resultsList\": [],\n\t\t\t\"confirmedWordLoading\": false,\n\t\t\t\"resultsVisible\": false,\n\t\t\t\"resultsLoading\": false,\n\t\t\t\"resultsLoaded\": false,\n\t\t\t\"selectedExampleWords\": {}\n\t\t};\n\t},\n\t\n\tcomponentWillMount: function() {\n\t\tif (typeof window !== 'undefined') {\n\t\t\twindow.addEventListener(\"click\", function(event) {\n\t\t\t\tif (this.state.resultsVisible) {\n\t\t\t\t\tif (event.target !== this.refs.dropdownList.getDOMNode() && \n\t\t\t\t\t    event.target.parentNode !== this.refs.dropdownList.getDOMNode() && \n\t\t\t\t\t    event.target.parentNode.parentNode !== this.refs.dropdownList.getDOMNode() && \n\t\t\t\t\t    event.target !== this.refs.toggleResultsButton.getDOMNode()) {\n\t\t\t\t\t\tthis.setState({\n\t\t\t\t\t\t\t\"resultsVisible\": false\t\n\t\t\t\t\t\t});\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}.bind(this));\n\t\t}\n\t},\n\t\n\tcomponentWillReceiveProps: function(nextProps) {\n\t\tif (nextProps.correction.word !== this.state.word) {\n\t\t\tvar newSuggestions = this.convertSuggestionsToComboData(nextProps.correction.suggestions);\n\t\t\tthis.setState({\n\t\t\t\t\"word\": nextProps.correction.word,\n\t\t\t\t\"spellingSuggestions\": newSuggestions,\n\t\t\t\t\"resultsVisible\": false,\n\t\t\t\t\"searchText\": \"\",\n\t\t\t\t\"resultsList\": [],\n\t\t\t\t\"confirmedWordLoading\": false,\n\t\t\t\t\"resultsLoading\": false,\n\t\t\t\t\"resultsLoaded\": false,\n\t\t\t\t\"selectedExampleWords\": {}\n\t\t\t});\n\t\t\tthis.refs.suggestionsCombo.setState({\"_textValue\": \"\"});\n\t\t}\n\t},\n\t\n\tchangeWord: function(event) {\n\t\tvar newWord = event.target.value;\n\t\t\n\t\tthis.setState({\n\t\t\t\"word\":  event.target.value\n\t\t});\n\t},\n\t\n\tupdateSuggestions: function() {\n\t\tSpellingService.check(\n\t\t\tthis.state.word,\n\t\t\tthis.handleNewSuggestions.bind(this),\n\t\t\tthis.handleError.bind(this));\n\t},\n\t\n\thandleNewSuggestions: function(data) {\n\t\tif (data[0]) {\n\t\t\tvar newSuggestions = this.convertSuggestionsToComboData(data[0].suggestions);\n\t\t\tthis.setState({\n\t\t\t\t\"spellingSuggestions\": newSuggestions\n\t\t\t});\n\t\t}\n\t\tconsole.debug(\"data: \", data);\n\t},\n\t\n\tchangeSearchType: function(event) {\n\t\tthis.setState({\n\t\t\t\"searchType\": event.target.value\n\t\t});\n\t},\n\t\n\tkeyUpHander: function(event) {\n\t\tif (event.keyCode === 13) {\n\t\t\tthis.toggleResultsVisible();\n\t\t}\n\t},\n\t\n\tchangeSearchText: function(event) {\n\t\tvar text = event.target.value;\n\t\tthis.setState({\n\t\t\t\"searchText\": event.target.value,\n\t\t\t\"resultsLoaded\": false,\n\t\t\t\"resultsLoading\": false,\n\t\t\t\"resultsVisible\": false\n\t\t});\n\t},\n\t\n\tselectExampleWord: function(word) {\n\t\t\n\t\tthis.state.selectedExampleWords[word] = true;\n\t\tthis.setState({\n\t\t\tselectedExampleWords: this.state.selectedExampleWords\n\t\t})\n\t},\n\t\n\tremoveExampleWord: function(word) {\n\t\t\n\t\tdelete this.state.selectedExampleWords[word];\n\t\tthis.setState({\n\t\t\tselectedExampleWords: this.state.selectedExampleWords\n\t\t})\n\t},\n\t\n\ttoggleResultsVisible: function() {\n\t\t\n\t\tif (!this.state.resultsVisible && !this.state.resultsLoaded && !this.state.resultsLoading) {\n\t\t\tif (this.state.searchText) {\n\t\t\t\tSpellingService.getExamples(\n\t\t\t\t\tthis.state.searchType, \n\t\t\t\t\tthis.state.searchText,\n\t\t\t\t\tthis.handleResultsReceived.bind(this), \n\t\t\t\t\tthis.handleError.bind(this));\n\t\t\t}\n\t\t}\n\t\telse if (this.state.resultsLoaded) {\n\t\t\tthis.setState({\n\t\t\t\t\"resultsVisible\": !this.state.resultsVisible\n\t\t\t});\n\t\t}\n\t},\n\t\n\tgetCorrectionData: function() {\n\t\treturn {\n\t\t\tword: this.state.word,\n\t\t\tcorrectedWord: this.refs.suggestionsCombo.state._textValue,\n\t\t\texamples: this.state.selectedExampleWords\n\t\t}\n\t},\n\t\n\thandleResultsReceived: function(results) {\n\t\t\n\t\tthis.setState({\n\t\t\t\"resultsVisible\": true,\n\t\t\t\"resultsLoaded\": true,\n\t\t\t\"resultsLoading\": false,\n\t\t\t\"resultsList\": results\n\t\t});\n\t},\n\t\n\thandleError: function() {\n\t\t\n\t},\n\t\n\trender: function() {\n\t\treturn templates.CorrectionEntry.bind(this)();\n\t}\n});\n},{\"./service/SpellingService.js\":7,\"./templates.js\":8,\"react\":undefined}],4:[function(require,module,exports){\nif (typeof(window) == 'undefined') {\n\tvar React = require('react');\n}\nelse {\n\tvar React = window.React;\n}\n\nvar templates = require('./templates.js');\n\nmodule.exports = React.createClass({displayName: \"exports\",\n\t\n\trender: function() {\n\t\treturn templates.CorrectionList.bind(this)();\n\t},\n\t\n\tblankRow: {word: \"\", suggestions: []},\n\t\n\tgetInitialState: function() {\n\t\treturn {\n\t\t\t\"corrections\": this.convertCorrectionsDataToComponentState(this.props.corrections),\n\t\t\t\"exampleWords\": [],\n\t\t}\n\t},\n\t\n\tcomponentWillReceiveProps: function(nextProps) {\n\t\tthis.setState({\n\t\t\t\"corrections\": this.convertCorrectionsDataToComponentState(nextProps.corrections)\n\t\t});\n\t},\n\t\n\t//Fixed to always be 5 entries. Only lists each error once.\n\t// - alreadyFound is a map of all the words found so far\n\t// - corrections is the data that we get back from the server, with all the spelling errors\n\t//The loop looks complex because it steps through the 5 state items and the corrections \n\t//separately so that it can remove duplicates.\n\tconvertCorrectionsDataToComponentState: function(corrections) {\n\t\tvar state = [];\n\t\tvar stateIndex = 0;\n\t\tvar correctionsIndex = 0;\n\t\tvar alreadyFound = {};\n\t\tvar word = \"\";\n\t\twhile (stateIndex < 5) {\n\t\t\tif (!corrections[correctionsIndex]) {\n\t\t\t\tstate[stateIndex] = this.blankRow;\n\t\t\t\tstateIndex++;\n\t\t\t}\n\t\t\telse {\n\t\t\t\tword = corrections[correctionsIndex].word;\n\t\t\t\tif (!alreadyFound[word]) {\n\t\t\t\t\talreadyFound[word] = true;\n\t\t\t\t\tstate[stateIndex] = corrections[correctionsIndex];\n\t\t\t\t\tstateIndex++;\n\t\t\t\t\tcorrectionsIndex++;\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\tcorrectionsIndex++;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn state;\n\t},\n\t\n\tshowResults: function() {\n\t\tvar correctionDataList = [];\n\t\tcorrectionDataList.push(this.refs.correction0.getCorrectionData());\n\t\tcorrectionDataList.push(this.refs.correction1.getCorrectionData());\n\t\tcorrectionDataList.push(this.refs.correction2.getCorrectionData());\n\t\tcorrectionDataList.push(this.refs.correction3.getCorrectionData());\n\t\tcorrectionDataList.push(this.refs.correction4.getCorrectionData());\n\n\t\tthis.refs.resultsList.setState({\n\t\t\t\"visible\": true,\n\t\t\t\"results\": correctionDataList \n\t\t});\n\t},\n\t\n\thideResults: function() {\n\t\tthis.refs.resultsList.setState({\n\t\t\t\"visible\": false\n\t\t})\n\t}\n\t\n});\n},{\"./templates.js\":8,\"react\":undefined}],5:[function(require,module,exports){\nif (typeof(window) == 'undefined') {\n\tvar React = require('react');\n}\nelse {\n\tvar React = window.React;\n}\nvar templates = require('./templates.js');\n\nmodule.exports = React.createClass({displayName: \"exports\",\n\t\n\trender: function() {\n\t\treturn templates.ResultsList.bind(this)();\n\t},\n\t\n\tgetInitialState: function() {\n\t\treturn {\n\t\t\t\"visible\": this.props.visible,\n\t\t\t\"results\": [] \n\t\t}\n\t},\n\t\n\tcomponentWillReceiveProps: function(nextProps) {\n\t\tthis.setState({\n\t\t\tvisible: nextProps.visible\n\t\t});\n\t},\n\t\n\thideResults: function() {\n\t\tthis.setState({\n\t\t\tvisible: false\n\t\t});\n\t}\n});\n},{\"./templates.js\":8,\"react\":undefined}],6:[function(require,module,exports){\nif (typeof(window) == 'undefined') {\n\tvar React = require('react');\n}\nelse {\n\tvar React = window.React;\n}\nvar templates = require('./templates.js');\n\nmodule.exports = React.createClass({displayName: \"exports\",\n\trender: function() {\n\t\treturn templates.StoryWriter.bind(this)();\n\t},\n\t\n\thandleError: function(data, status) {\n    \tconsole.debug(\"spell check error: \", status);\n\t},\n\t\n\thandleSubmit: function(event) {\n\t\t\n\t\tevent.stopPropagation();\n\t\tevent.preventDefault();\n\t\tvar storyText = this.refs.storyText.getDOMNode().value;\n\t\tthis.props.submitStory(this.refs.storyText.getDOMNode().value);\n\t}\n});\n\n},{\"./templates.js\":8,\"react\":undefined}],7:[function(require,module,exports){\n\nvar SpellingService = {\n};\n\nSpellingService.check = function(text, successHandler, errorHandler) {\n\t\n\tSpellingService.send({\"text\": text}, 'wordsearch/spellcheck.php', successHandler, errorHandler);\n};\n\nSpellingService.getExamples = function(searchType, searchTerm, successHandler, errorHandler) {\n\t\n\tSpellingService.send({\"searchType\": searchType, \"searchTerm\": searchTerm}, 'wordsearch/words.php', successHandler, errorHandler);\n\t\n};\n\nSpellingService.send = function(data, url, successHandler, errorHandler) {\n\tvar params = JSON.stringify(data);\n\tvar req = new XMLHttpRequest();\n\treq.open(\"POST\", url, true);\n\treq.addEventListener(\"load\", \n\t\tfunction(data, status) {successHandler(JSON.parse(req.responseText), status)}, false);\n\treq.addEventListener(\"error\", function(data, status) {errorHandler(status)}, false);\n\treq.setRequestHeader(\"Content-type\", \"application/json; charset=utf-8\");\n\treq.setRequestHeader(\"Content-length\", params.length);\n\treq.setRequestHeader(\"Connection\", \"close\");\n\treq.send(params);\n};\n\nmodule.exports = SpellingService;\n\n},{}],8:[function(require,module,exports){\nif (typeof(window) == 'undefined') {\n\tvar React = require('react');\n}\nelse {\n\tvar React = window.React;\n}\n\nvar StoryWriter = require(\"./StoryWriter.js\");\nvar CorrectionList = require(\"./CorrectionList.js\");\nvar CorrectionEntry = require(\"./CorrectionEntry.js\");\nvar Combobox = require(\"./Combobox.js\");\nvar ResultsList = require(\"./ResultsList.js\");\n\n\n\nexports.App = function() {\n\n\treturn (\n\t\tReact.createElement(\"span\", null, \n\t\t\tReact.createElement(\"div\", {className: \"column column-1-3\"}, \n\t\t\t\tReact.createElement(\"article\", null, \n\t\t\t\t\tReact.createElement(\"div\", null, \n\t\t\t\t\t\tReact.createElement(\"header\", null, \n\t\t\t\t\t\t\t\"Story Text\"\n\t\t\t\t\t\t), \n\t\t\t\t\t\tReact.createElement(StoryWriter, {submitStory: this.submitStory}), \n\t\t\t\t\t\tReact.createElement(\"div\", {className: \"clear\"})\n\t\t\t\t\t)\n\t\t\t\t)\n\t\t\t), \n\t\n\t\t\tReact.createElement(\"div\", {className: \"column column-2-3\"}, \n\t\t\t\tReact.createElement(\"article\", null, \n\t\t\t\t\tReact.createElement(\"div\", null, \n\t\t\t\t\t\tReact.createElement(\"div\", {className: \"word-column\"}, \n\t\t\t\t\t\t\tReact.createElement(CorrectionList, {corrections: this.state.corrections})\n\t\t\t\t\t\t), \n\t\t\t\t\t\tReact.createElement(\"div\", {className: \"clear\"})\n\t\t\t\t\t)\n\t\t\t\t)\n\t\t\t)\n\t\t)\n\t)\n\t\n};\n\n\nexports.StoryWriter = function() {\n\treturn (\n\t\tReact.createElement(\"div\", null, \n\t\t\tReact.createElement(\"form\", {onSubmit: this.handleSubmit, className: \"large\"}, \n\t\t\t\tReact.createElement(\"textarea\", {\n\t\t\t\t\tref: \"storyText\", \n\t\t\t\t\tautoComplete: \"off\", autoCorrect: \"off\", autoCapitalize: \"off\", spellCheck: \"false\", \n\t\t\t\t\tplaceholder: \"\"\n\t\t\t\t}), \n\t\t\t\tReact.createElement(\"button\", null, \"Analyse text\")\n\t\t\t)\n\t\t)\n\t);\n};\n\n\nexports.CorrectionList = function() {\n\t\n\treturn (\n\t\tReact.createElement(\"div\", null, \n\t\t\tReact.createElement(\"table\", {className: \"correctionsTable\", cellSpacing: \"0\"}, \n\t\t\t\tReact.createElement(\"thead\", null, \n\t\t\t\t\tReact.createElement(\"tr\", null, \n\t\t\t\t\t\tReact.createElement(\"th\", null, \"Student Attempt\"), \n\t\t\t\t\t\tReact.createElement(\"th\", null, \"Word Confirmed\"), \n\t\t\t\t\t\tReact.createElement(\"th\", null, \"Word Search\")\n\t\t\t\t\t)\n\t\t\t\t), \n\t\t\t\tReact.createElement(CorrectionEntry, {ref: \"correction0\", correction: this.state.corrections[0]}), \n\t\t\t\tReact.createElement(CorrectionEntry, {ref: \"correction1\", correction: this.state.corrections[1]}), \n\t\t\t\tReact.createElement(CorrectionEntry, {ref: \"correction2\", correction: this.state.corrections[2]}), \n\t\t\t\tReact.createElement(CorrectionEntry, {ref: \"correction3\", correction: this.state.corrections[3]}), \n\t\t\t\tReact.createElement(CorrectionEntry, {ref: \"correction4\", correction: this.state.corrections[4]})\n\t\t\t), \n\t\t\tReact.createElement(\"div\", {className: \"clear\"}), \n\t\t\tReact.createElement(\"div\", {className: \"centering\"}, \n\t\t\t\tReact.createElement(\"button\", {className: \"large\", \n\t\t\t\t\tonClick: this.showResults}, \"Print list\")\n\t\t\t), \n\t\t\tReact.createElement(ResultsList, {ref: \"resultsList\", visible: this.state.resultsVisible, results: this.state.correctionResults})\n\t\t)\n\t);\n};\n\nexports.ResultsList = function() {\n\t\n\tif (this.state.visible) {\n\t\t\n\t\tvar i, words, wordEntry, rows = [];\n\t\tfor (i=0; i<this.state.results.length; i++) {\n\t\t\twordEntry = this.state.results[i];\n\t\t\twords = [];\n\t\t\tfor (word in wordEntry.examples) {\n\t\t\t\twords.push(React.createElement(\"div\", null, word));\n\t\t\t}\n\t\t\t\n\t\t\trows.push(\n\t\t\t\tReact.createElement(\"tr\", null, \n\t\t\t\t\tReact.createElement(\"td\", null, \n\t\t\t\t\t\tReact.createElement(\"div\", null, \n\t\t\t\t\t\t\twords\n\t\t\t\t\t\t)\n\t\t\t\t\t)\n\t\t\t\t));\n\t\t}\n\t\t\n\t\treturn (\n\t\t\tReact.createElement(\"div\", {ref: \"parentElement\", className: \"results-display\", onClick: this.hideResults}, \n\t\t\t\tReact.createElement(\"table\", null, \n\t\t\t\t\tReact.createElement(\"thead\", null, \n\t\t\t\t\t\tReact.createElement(\"tr\", null, \n\t\t\t\t\t\t\tReact.createElement(\"th\", null, \"Word List\")\t\n\t\t\t\t\t\t)\n\t\t\t\t\t), \n\t\t\t\t\tReact.createElement(\"tbody\", null, \n\t\t\t\t\t\trows\n\t\t\t\t\t)\n\t\t\t\t)\n\t\n\t\t\t)\n\t\t);\n\t}\n\telse {\n\t\treturn (React.createElement(\"div\", null))\n\t}\n};\n\nexports.CorrectionEntry = function() {\n\t\n\tvar classes = {listState: (this.state.resultsVisible ? \"\" : \"hidden\")};\n\tvar word;\n\tvar resultsList = [];\n\t\n\tthis.state.resultsList.forEach(function(word) {\n\t\tresultsList.push(React.createElement(\"div\", {key: \"rl\" + word, onClick: function(){this.selectExampleWord(word)}.bind(this)}, word, React.createElement(\"div\", {className: \"add-word-button\"})));\n\t}.bind(this));\n\t\n\tselectedExampleWords = [];\n\tObject.keys(this.state.selectedExampleWords).forEach(function(word) {\n\t\tselectedExampleWords.push(React.createElement(\"div\", {key: \"ew\" + word, onClick: function(){this.removeExampleWord(word)}.bind(this)}, word));\n\t}.bind(this));\n\t\n\treturn (\n\t\tReact.createElement(\"tbody\", null, \n\t\t\tReact.createElement(\"tr\", {className: \"input-fields-row\"}, \n\t\t\t\tReact.createElement(\"td\", null, \n\t\t\t\t\tReact.createElement(\"input\", {className: \"disabled\", value: this.state.word, onChange: this.changeWord, onBlur: this.updateSuggestions, disabled: \"true\"})\n\t\t\t\t), \n\t\t\t\tReact.createElement(\"td\", null, \n\t\t\t\t\tReact.createElement(Combobox, {ref: \"suggestionsCombo\", data: this.state.spellingSuggestions})\n\t\t\t\t), \n\t\t\t\tReact.createElement(\"td\", null, \n\t\t\t\t\tReact.createElement(\"div\", {className: \"example-search-container\"}, \n\t\t\t\t\t\tReact.createElement(\"select\", {onChange: this.changeSearchType, value: this.state.searchType}, \n\t\t\t\t\t\t\tReact.createElement(\"option\", {value: \"contains\"}, \"Contains..\"), \n\t\t\t\t\t\t\tReact.createElement(\"option\", {value: \"startsWith\"}, \"Starts with..\"), \n\t\t\t\t\t\t\tReact.createElement(\"option\", {value: \"endsWith\"}, \"Ends with..\")\n\t\t\t\t\t\t), \n\t\t\t\t\t\tReact.createElement(\"input\", {className: \"example-search\", placeholder: \"eg: ing\", value: this.state.searchText, onChange: this.changeSearchText, onKeyUp: this.keyUpHander}), \n\t\t\t\t\t\tReact.createElement(\"button\", {ref: \"toggleResultsButton\", className: \"small results-search\", onClick: this.toggleResultsVisible}), \n\t\t\t\t\t\tReact.createElement(\"div\", {className: classes.listState + ' ' + 'positioner'}, \n\t\t\t\t\t\t\tReact.createElement(\"div\", {ref: \"dropdownList\", className: \"dropdown-list\"}, \n\t\t\t\t\t\t\t\tresultsList\n\t\t\t\t\t\t\t)\n\t\t\t\t\t\t)\n\t\t\t\t\t)\n\t\t\t\t)\n\t\t\t), \n\t\t\tReact.createElement(\"tr\", {className: \"example-words-row\"}, \n\t\t\t\tReact.createElement(\"td\", {colSpan: \"3\"}, \n\t\t\t\t\tReact.createElement(\"h2\", {className: \"exampleWordsTitle\"}, \"Word List:\"), \n\t\t\t\t\tselectedExampleWords\n\t\t\t\t)\n\t\t\t)\n\t\t)\n\t);\n};\n\n\n\n},{\"./Combobox.js\":2,\"./CorrectionEntry.js\":3,\"./CorrectionList.js\":4,\"./ResultsList.js\":5,\"./StoryWriter.js\":6,\"react\":undefined}]},{},[1]);\n"],"sourceRoot":"/source/"}